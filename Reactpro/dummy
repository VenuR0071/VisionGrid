import React, { useState, useEffect } from 'react';
import { Container, Grid, Paper, Typography, TextField, Button, Box, MenuItem, Select, FormControl, InputLabel } from '@mui/material';
import axios from 'axios';

const CameraStream = ({ cameraId, onDelete, onClick, showUseCase, showDelete  }) => {
  const streamUrl = `http://localhost:5000/camera/${cameraId}`;
  const [isFullScreen, setIsFullScreen] = useState(false);
  const [useCase, setUseCase] = useState('');

  const handleFullScreen = () => {
    const img = document.getElementById(`camera-${cameraId}`);

    if (!isFullScreen) {
      if (img.requestFullscreen) {
        img.requestFullscreen();
      } else if (img.webkitRequestFullscreen) {
        img.webkitRequestFullscreen();
      } else if (img.mozRequestFullScreen) {
        img.mozRequestFullScreen();
      } else if (img.msRequestFullscreen) {
        img.msRequestFullscreen();
      }

      setIsFullScreen(true);
    } else {
      if (document.exitFullscreen) {
        document.exitFullscreen();
      } else if (document.webkitExitFullscreen) {
        document.webkitExitFullscreen();
      } else if (document.mozCancelFullScreen) {
        document.mozCancelFullScreen();
      } else if (document.msExitFullscreen) {
        document.msExitFullscreen();
      }

      setIsFullScreen(false);
    }
  };

  const handleUseCaseChange = (event) => {
    setUseCase(event.target.value);
  };

  const handleDeleteCamera = async () => {
    try {
      await axios.delete(`http://localhost:5000/delete_camera/${cameraId}`);
      onDelete(cameraId);
    } catch (error) {
      console.error('Error deleting camera:', error);
    }
  };

  return (
    <Paper elevation={3} sx={{ p: 2, borderRadius: 8 }}>
      <Box display="flex" flexDirection="column" alignItems="center" justifyContent="space-between" >
        <Box mb={1} flex="1">
          <Typography variant="subtitle1" align="center" gutterBottom>
            Camera {cameraId}
          </Typography>
          <Box position="relative" onClick={() => onClick(cameraId)} sx={{ cursor: 'pointer', borderRadius: 4, overflow: 'hidden' }}>
            <img
              id={`camera-${cameraId}`}
              src={streamUrl}
              alt={`Camera ${cameraId}`}
              width="100%"
              style={{ borderRadius: 4 }}
            />
          </Box>
        </Box>
        <Box>
          {showUseCase ? (
            <FormControl fullWidth sx={{ mt: 1 }}>
              <InputLabel id="use-case-label">Use Case</InputLabel>
              <Select
                labelId="use-case-label"
                value={useCase}
                onChange={handleUseCaseChange}
                label="Use Case"
                variant="outlined"
                size="small"
              >
                <MenuItem value="">Select Use Case</MenuItem>
                <MenuItem value="motion-detection">Motion Detection</MenuItem>
                <MenuItem value="object-tracking">Object Tracking</MenuItem>
                <MenuItem value="facial-recognition">Facial Recognition</MenuItem>
              </Select>
            </FormControl>
          ) : null}
          {showDelete && (
          <Button variant="outlined" color="error" onClick={handleDeleteCamera} fullWidth sx={{ mt: 1 }}>
            Delete Camera
          </Button>
        )}
          
        </Box>
      </Box>
    </Paper>
  );
};

const App = () => {
  const [cameras, setCameras] = useState([]);
  const [cameraId, setCameraId] = useState('');
  const [rtspUrl, setRtspUrl] = useState('');
  const [addError, setAddError] = useState('');
  const [selectedCamera, setSelectedCamera] = useState(null);

  useEffect(() => {
    // Fetch initial camera list if needed
  }, []);

  const handleAddCamera = async () => {
    if (!cameraId || !rtspUrl) {
      setAddError('Both Camera ID and RTSP URL are required');
      return;
    }

    try {
      await axios.post('http://localhost:5000/add_camera', {
        camera_id: parseInt(cameraId),
        rtsp_url: rtspUrl,
      });

      setCameras([...cameras, { cameraId: parseInt(cameraId), rtspUrl }]);
      setCameraId('');
      setRtspUrl('');
      setAddError('');
    } catch (error) {
      console.error('Error adding camera:', error);
      setAddError('Error adding camera');
    }
  };

  const handleDeleteCamera = (deletedCameraId) => {
    const updatedCameras = cameras.filter((camera) => camera.cameraId !== deletedCameraId);
    setCameras(updatedCameras);
  };

  const handleCameraClick = (cameraId) => {
    setSelectedCamera(cameraId);
  };

  return (
    <Container maxWidth={false} sx={{ mt: 2, transform: 'scale(0.9)', display: 'flex', flexDirection: 'column', height: '100vh' }}>
      <Typography variant="h5" gutterBottom>
        IP Camera Dashboard
      </Typography>
      <Paper elevation={3} sx={{ p: 2, mb: 2, borderRadius: 8 }}>
        <Grid container spacing={2} alignItems="center">
          <Grid item xs={12} sm={4}>
            <TextField
              label="Camera ID"
              value={cameraId}
              onChange={(e) => setCameraId(e.target.value)}
              fullWidth
              variant="outlined"
              size="small"
              InputProps={{ sx: { borderRadius: 4 } }}
            />
          </Grid>

          <Grid item xs={12} sm={6}>
            <TextField
              label="RTSP URL"
              value={rtspUrl}
              onChange={(e) => setRtspUrl(e.target.value)}
              fullWidth
              variant="outlined"
              size="small"
              InputProps={{ sx: { borderRadius: 4 } }}
            />
          </Grid>

          <Grid item xs={12} sm={2}>
            <Button variant="contained" color="primary" onClick={handleAddCamera} fullWidth>
              Add Camera
            </Button>
          </Grid>
        </Grid>
        {addError && (
          <Typography variant="body2" color="error" sx={{ mt: 1 }}>
            {addError}
          </Typography>
        )}
      </Paper>
      <Box sx={{ display: 'flex', flexGrow: 1, gap: 2 }}>
        <Grid container spacing={3} sx={{ flexGrow: 1 }}>
          <Grid item xs={4}>
            <Box sx={{ backgroundColor: '#f0f0f0', height: '100%', borderRadius: 2, overflow: 'auto', padding: 1 }}>
              <Grid container spacing={2}  sx={{ height: '80%' }}>
                {cameras.map((camera) => (
                  <Grid item xs={6} key={camera.cameraId} sx={{ height: '50%' }}>
                    <CameraStream
                      cameraId={camera.cameraId}
                      onDelete={handleDeleteCamera}
                      onClick={handleCameraClick}
                      showUseCase={false}
                      showDelete={true}
                    />
                  </Grid>
                ))}
              </Grid>
            </Box>
          </Grid>
          <Grid item xs={8}>
            <Box sx={{ backgroundColor: '#e0e0e0', height: '87vh', borderRadius: 2, overflow: 'auto', padding: 1 }}>
              {selectedCamera && cameras.some((camera) => camera.cameraId === selectedCamera) && (
                <CameraStream
                  cameraId={selectedCamera}
                  onDelete={handleDeleteCamera}
                  onClick={() => {}}
                  showUseCase={true}
                  showDelete={false}
                />
              )}
            </Box>
          </Grid>
        </Grid>
      </Box>
    </Container>
  );
};  
export default App;



import json
from flask import Flask, Response, request, jsonify
from flask_cors import CORS
import cv2

app = Flask(__name__)
CORS(app)

# Load camera URLs from a JSON file
try:
    with open('camera_urls.json', 'r') as f:
        camera_urls = json.load(f)
except FileNotFoundError:
    camera_urls = {}

def generate_stream(rtsp_url):
    cap = cv2.VideoCapture(rtsp_url)
    while True:
        ret, frame = cap.read()
        if not ret:
            break
        _, buffer = cv2.imencode('.jpg', frame)
        frame = buffer.tobytes()
        yield (b'--frame\r\n'
               b'Content-Type: image/jpeg\r\n\r\n' + frame + b'\r\n')

@app.route('/camera/<int:camera_id>')
def video_feed(camera_id):
    if camera_id not in camera_urls:
        return "Camera not found", 404
    return Response(generate_stream(camera_urls[camera_id]), mimetype='multipart/x-mixed-replace; boundary=frame')

@app.route('/add_camera', methods=['POST'])
def add_camera():
    data = request.json
    if 'camera_id' not in data or 'rtsp_url' not in data:
        return jsonify({"message": "Both camera_id and rtsp_url are required"}), 400
    camera_id = data['camera_id']
    rtsp_url = data['rtsp_url']
    if camera_id in camera_urls:
        return jsonify({"message": "Camera already exists"}), 400
    camera_urls[camera_id] = rtsp_url
    with open('camera_urls.json', 'w') as f:
        json.dump(camera_urls, f)
    return jsonify({"message": "Camera added successfully"})

@app.route('/delete_camera/<int:camera_id>', methods=['DELETE'])
def delete_camera(camera_id):
    if camera_id not in camera_urls:
        return jsonify({"message": "Camera not found"}), 404
    del camera_urls[camera_id]
    with open('camera_urls.json', 'w') as f:
        json.dump(camera_urls, f)
    return jsonify({"message": "Camera deleted successfully"})
    

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)


    ****************************************************************---------------------------------------------------------------------------



    import React, { useState, useEffect, useRef, useCallback } from 'react';
import { Container, Grid, Paper, Typography, TextField, Button, Box } from '@mui/material';
import axios from 'axios';

const CameraStream = ({ cameraId, onDelete, onClick, frameUrl, showDelete }) => {
  return (
    <Paper elevation={3} sx={{ p: 2, borderRadius: 8 }}>
      <Box display="flex" flexDirection="column" alignItems="center">
        <Typography variant="subtitle1" align="center" gutterBottom>
          Camera {cameraId}
        </Typography>
        <Box position="relative" onClick={() => onClick(cameraId)} sx={{ cursor: 'pointer', borderRadius: 4, overflow: 'hidden' }}>
          <img
            src={frameUrl}
            alt={`Camera ${cameraId}`}
            width="100%"
            style={{ borderRadius: 4 }}
          />
        </Box>
        {showDelete && (
          <Button variant="outlined" color="error" onClick={() => onDelete(cameraId)} fullWidth sx={{ mt: 1 }}>
            Delete Camera
          </Button>
        )}
      </Box>
    </Paper>
  );
};

const App = () => {
  const [cameras, setCameras] = useState([]);
  const [cameraId, setCameraId] = useState('');
  const [rtspUrl, setRtspUrl] = useState('');
  const [addError, setAddError] = useState('');
  const [selectedCamera, setSelectedCamera] = useState(null);
  const canvasRef = useRef(null);

  const handleAddCamera = useCallback(async () => {
    if (!cameraId || !rtspUrl) {
      setAddError('Both Camera ID and RTSP URL are required');
      return;
    }

    try {
      await axios.post('http://localhost:5000/add_camera', {
        camera_id: parseInt(cameraId),
        rtsp_url: rtspUrl,
      });

      const response = await axios.get(`http://localhost:5000/single_frame/${cameraId}`, { responseType: 'blob' });
      const frameUrl = URL.createObjectURL(new Blob([response.data], { type: 'image/jpeg' }));

      setCameras([...cameras, { cameraId: parseInt(cameraId), rtspUrl, frameUrl }]);
      setCameraId('');
      setRtspUrl('');
      setAddError('');
    } catch (error) {
      console.error('Error adding camera:', error);
      setAddError('Error adding camera');
    }
  }, [cameraId, rtspUrl, cameras]);


  const handleDeleteCamera = useCallback(async (deletedCameraId) => {
    try {
      await axios.delete(`http://localhost:5000/delete_camera/${deletedCameraId}`);
      setCameras(cameras.filter((camera) => camera.cameraId !== deletedCameraId));
    } catch (error) {
      console.error('Error deleting camera:', error);
    }
  }, [cameras]);

  const handleCameraClick = useCallback((cameraId) => {
    setSelectedCamera(cameraId);
  }, []);
  useEffect(() => {
    if (!selectedCamera || !cameras.some((camera) => camera.cameraId === selectedCamera)) return;
  
    const videoSrc = `http://localhost:5000/camera/${selectedCamera}`;
    const img = new Image();
    img.src = videoSrc;
  
    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
  
    const drawFrame = () => {
      ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
      requestAnimationFrame(drawFrame);
    };
  
    img.onload = () => {
      canvas.width = img.width;
      canvas.height = img.height;
      drawFrame();
    };
  
    img.onerror = (e) => {
      console.error('Error loading image:', e);
      // Handle error, e.g., show an error message or retry loading
    };
  
    return () => {
      cancelAnimationFrame(drawFrame);
    };
  }, [selectedCamera, cameras]);

  return (
    <Container maxWidth={false} sx={{ mt: 2, transform: 'scale(0.9)', display: 'flex', flexDirection: 'column', height: '100vh' }}>
      <Typography variant="h5" gutterBottom>
        IP Camera Dashboard
      </Typography>
      <Paper elevation={3} sx={{ p: 2, mb: 2, borderRadius: 8 }}>
        <Grid container spacing={2} alignItems="center">
          <Grid item xs={12} sm={4}>
            <TextField
              label="Camera ID"
              value={cameraId}
              onChange={(e) => setCameraId(e.target.value)}
              fullWidth
              variant="outlined"
              size="small"
              InputProps={{ sx: { borderRadius: 4 } }}
            />
          </Grid>
          <Grid item xs={12} sm={6}>
            <TextField
              label="RTSP URL"
              value={rtspUrl}
              onChange={(e) => setRtspUrl(e.target.value)}
              fullWidth
              variant="outlined"
              size="small"
              InputProps={{ sx: { borderRadius: 4 } }}
            />
          </Grid>
          <Grid item xs={12} sm={2}>
            <Button variant="contained" color="primary" onClick={handleAddCamera} fullWidth>
              Add Camera
            </Button>
          </Grid>
        </Grid>
        {addError && (
          <Typography variant="body2" color="error" sx={{ mt: 1 }}>
            {addError}
          </Typography>
        )}
      </Paper>
      <Box sx={{ display: 'flex', flexGrow: 1, gap: 2 }}>
        <Grid container spacing={3} sx={{ flexGrow: 1 }}>
          <Grid item xs={4}>
              <Box sx={{ backgroundColor: '#f0f0f0', height: '100%', borderRadius: 2, overflow: 'auto', padding: 1 }}>
              <Grid container spacing={2} sx={{ height: '80%' }}>
                {cameras.map((camera) => (
                  <Grid item xs={6} key={camera.cameraId} sx={{ height: '50%' }}>
                    <CameraStream
                      cameraId={camera.cameraId}
                      onDelete={handleDeleteCamera}
                      onClick={handleCameraClick}
                      frameUrl={camera.frameUrl}
                      showDelete={true}
                    />
                  </Grid>
                ))}
              </Grid>
            </Box>
          </Grid>
          <Grid item xs={8}>
            <Box sx={{ backgroundColor: '#e0e0e0', height: '87vh', borderRadius: 2, overflow: 'auto', padding: 1 }}>
              <canvas
                ref={canvasRef}
                style={{ border: 'none', borderRadius: 1, width: '100%', height: '100%' }}
              />
            </Box>
          </Grid>
        </Grid>
      </Box>
    </Container>
  );
};

export default App;



import cv2
from flask import Flask, Response, request, jsonify
from flask_cors import CORS
import sqlite3
import os
import time

app = Flask(__name__)
CORS(app)

# Create the database file if it doesn't exist
if not os.path.exists('cameras.db'):
    conn = sqlite3.connect('cameras.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS cameras (camera_id INTEGER PRIMARY KEY, rtsp_url TEXT)''')
    conn.commit()
    conn.close()

def generate_stream(rtsp_url):
    cap = cv2.VideoCapture(rtsp_url)
    try:
        while cap.isOpened():
            ret, frame = cap.read()
            if not ret:
                continue  # Skip frames that could not be read
            _, buffer = cv2.imencode('.jpg', frame)
            frame = buffer.tobytes()
            yield (b'--frame\r\n' b'Content-Type: image/jpeg\r\n\r\n' + frame + b'\r\n')
    except Exception as e:
        print(f"Error generating stream: {e}")
    finally:
        cap.release()
        cv2.destroyAllWindows()
def fetch_single_frame(rtsp_url):
    cap = cv2.VideoCapture(rtsp_url)
    ret, frame = cap.read()
    if not ret:
        return None
    _, buffer = cv2.imencode('.jpg', frame)
    frame = buffer.tobytes()
    cap.release()
    return frame

@app.route('/camera/<int:camera_id>', methods=['GET'])
def video_feed(camera_id):
    conn = sqlite3.connect('cameras.db')
    c = conn.cursor()
    c.execute("SELECT rtsp_url FROM cameras WHERE camera_id = ?", (camera_id,))
    result = c.fetchone()
    conn.close()
    if result is None:
        return "Camera not found", 404
    rtsp_url = result[0]
    return Response(generate_stream(rtsp_url), mimetype='multipart/x-mixed-replace; boundary=frame')

@app.route('/add_camera', methods=['POST'])
def add_camera():
    data = request.json
    if 'camera_id' not in data or 'rtsp_url' not in data:
        return jsonify({"message": "Both camera_id and rtsp_url are required"}), 400
    camera_id = data['camera_id']
    rtsp_url = data['rtsp_url']
    conn = sqlite3.connect('cameras.db')
    c = conn.cursor()
    c.execute("SELECT * FROM cameras WHERE camera_id = ?", (camera_id,))
    result = c.fetchone()
    if result is not None:
        conn.close()
        return jsonify({"message": "Camera already exists"}), 400
    c.execute("INSERT INTO cameras (camera_id, rtsp_url) VALUES (?, ?)", (camera_id, rtsp_url))
    conn.commit()
    conn.close()
    return jsonify({"message": "Camera added successfully"})

@app.route('/delete_camera/<int:camera_id>', methods=['DELETE'])
def delete_camera(camera_id):
    conn = sqlite3.connect('cameras.db')
    c = conn.cursor()
    c.execute("SELECT * FROM cameras WHERE camera_id = ?", (camera_id,))
    result = c.fetchone()
    if result is None:
        conn.close()
        return jsonify({"message": "Camera not found"}), 404
    c.execute("DELETE FROM cameras WHERE camera_id = ?", (camera_id,))
    conn.commit()
    conn.close()
    return jsonify({"message": "Camera deleted successfully"})

@app.route('/single_frame/<int:camera_id>', methods=['GET'])
def single_frame(camera_id):
    conn = sqlite3.connect('cameras.db')
    c = conn.cursor()
    c.execute("SELECT rtsp_url FROM cameras WHERE camera_id = ?", (camera_id,))
    result = c.fetchone()
    conn.close()
    if result is None:
        return "Camera not found", 404
    rtsp_url = result[0]
    frame = fetch_single_frame(rtsp_url)
    if frame is None:
        return "Unable to fetch frame", 500
    return Response(frame, mimetype='image/jpeg')



if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)

